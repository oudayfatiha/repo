
#include <stdio.h>
#include <string.h>

#define MAX_TACHES 100

// Structure de Tâche
typedef struct {
    char titre[100];
    char description[200];
    char date_echeance[11];  // Format: DD/MM/YYYY
    char priorite[10];        // "High" ou "Low"
} Tache;

// Tableau pour stocker les tâches
Tache taches[MAX_TACHES];
int nombre_taches = 0;

// Fonction pour ajouter une tâche
void ajouter_tache() {
    if (nombre_taches >= MAX_TACHES) {
        printf("Impossible d'ajouter plus de tâches, la limite est atteinte.\n");
        return;
    }

    Tache nouvelle_tache;

    // Demander à l'utilisateur d'entrer le titre de la tâche
    printf("Entrez le titre de la tâche: ");
    scanf("%s", nouvelle_tache.titre);  // Utiliser %s pour saisir le titre (ne prend qu'un mot)

    // Demander à l'utilisateur d'entrer la description de la tâche
    printf("Entrez la description de la tâche: ");
    scanf(" %[^\n]", nouvelle_tache.description);  // Utiliser " %[^\n]" pour lire toute la ligne jusqu'à la nouvelle ligne

    // Demander à l'utilisateur d'entrer la date d'échéance
    printf("Entrez la date d'échéance (JJ/MM/AAAA): ");
    scanf("%s", nouvelle_tache.date_echeance);

    // Demander à l'utilisateur d'entrer la priorité
    printf("Entrez la priorité (High/Low): ");
    scanf("%s", nouvelle_tache.priorite);

    // Ajouter la tâche au tableau
    taches[nombre_taches] = nouvelle_tache;
    nombre_taches++;

    printf("Tâche ajoutée avec succès.\n");
}

// Fonction pour afficher toutes les tâches
void afficher_taches() {
    if (nombre_taches == 0) {
        printf("Aucune tâche à afficher.\n");
        return;
    }

    printf("Liste des tâches :\n");
    for (int i = 0; i < nombre_taches; i++) {
        printf("\nTâche %d\n", i + 1);
        printf("Titre: %s\n", taches[i].titre);
        printf("Description: %s\n", taches[i].description);
        printf("Date d'échéance: %s\n", taches[i].date_echeance);
        printf("Priorité: %s\n", taches[i].priorite);
    }
}

// Fonction pour modifier une tâche
void modifier_tache() {
    int index;
    
    // Demander à l'utilisateur de spécifier le numéro de la tâche à modifier
    printf("Entrez le numéro de la tâche à modifier (1 à %d): ", nombre_taches);
    scanf("%d", &index);
    
    if (index < 1 || index > nombre_taches) {
        printf("Tâche invalide.\n");
        return;
    }

   

    // Demander à l'utilisateur de saisir les nouvelles informations pour la tâche
    printf("Entrez le nouveau titre de la tâche: ");
    scanf("%s", taches[index].titre);

    printf("Entrez la nouvelle description de la tâche: ");
    scanf(" %[^\n]", taches[index].description);

    printf("Entrez la nouvelle date d'échéance (JJ/MM/AAAA): ");
    scanf("%s", taches[index].date_echeance);

    printf("Entrez la nouvelle priorité (High/Low): ");
    scanf("%s", taches[index].priorite);

    printf("Tâche modifiée avec succès.\n");
}

// Fonction pour supprimer une tâche
void supprimer_tache() {
    int index;
    
    // Demander à l'utilisateur de spécifier le numéro de la tâche à supprimer
    printf("Entrez le numéro de la tâche à supprimer (1 à %d): ", nombre_taches);
    scanf("%d", &index);
    
    if (index < 1 || index > nombre_taches) {
        printf("Tâche invalide.\n");
        return;
    }

    // Décaler les tâches après celle à supprimer
    for (int i = index; i < nombre_taches - 1; i++) {
        taches[i] = taches[i + 1];
    }

    // Décrémenter le nombre de tâches
    nombre_taches--;

    printf("Tâche supprimée avec succès.\n");
}

// Fonction pour filtrer les tâches par priorité
void filtrer_par_priorite() {
    char priorite[10];
    
    // Demander à l'utilisateur de spécifier la priorité
    printf("Entrez la priorité pour filtrer (High/Low): ");
    scanf("%s", priorite);
    
    int trouve = 0;
    
    // Parcourir toutes les tâches et afficher celles qui correspondent à la priorité donnée
    printf("Liste des tâches avec priorité %s :\n", priorite);
    for (int i = 0; i < nombre_taches; i++) {
        if (strcmp(taches[i].priorite, priorite) == 0) {
            printf("\nTâche %d\n", i + 1);
            printf("Titre: %s\n", taches[i].titre);
            printf("Description: %s\n", taches[i].description);
            printf("Date d'échéance: %s\n", taches[i].date_echeance);
            printf("Priorité: %s\n", taches[i].priorite);
            trouve = 1;
        }
    }

    if (!trouve) {
        printf("Aucune tâche avec la priorité %s trouvée.\n", priorite);
    }
}

// Menu principal de l'application
int main() {
    int choix;

    while (1) {
        printf("\nMenu :\n");
        printf("1. Ajouter une tâche\n");
        printf("2. Afficher toutes les tâches\n");
        printf("3. Modifier une tâche\n");
        printf("4. Supprimer une tâche\n");
        printf("5. Filtrer les tâches par priorité\n");
        printf("6. Quitter\n");
        printf("Entrez votre choix : ");
        scanf("%d", &choix);

        switch (choix) {
            case 1:
                ajouter_tache();
                break;
            case 2:
                afficher_taches();
                break;
            case 3:
                modifier_tache();
                break;
            case 4:
                supprimer_tache();
                break;
            case 5:
                filtrer_par_priorite();
                break;
            case 6:
                printf("Au revoir!\n");
                return 0;
            default:
                printf("Choix invalide, essayez de nouveau.\n");
        }
    }

    return 0;
}
